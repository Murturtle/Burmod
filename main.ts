var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {
      get: all[name],
      enumerable: true,
      configurable: true,
      set: (newValue) => all[name] = () => newValue
    });
};

// src/util/clientName.ts
var clientName = "burmod";

// src/util/consoleLogger.ts
function logToConsole(msg) {
  console.log(`[${clientName}] ${msg}`);
}

// src/util/chatLogger.ts
function logToChat(msg) {
  ModAPI.displayToChat({ msg: `\xA75[${clientName}]\xA7r ${msg}` });
}

// src/cheats/flight.ts
var exports_flight = {};
__export(exports_flight, {
  settings: () => {
    {
      return settings;
    }
  },
  init: () => {
    {
      return init;
    }
  }
});
function init(parent) {
  parent.onUpdate = function() {
    if (parent.getEnabled()) {
      if (!ModAPI.player.capabilities.isFlying) {
        ModAPI.player.capabilities.isFlying = true;
        ModAPI.player.reload();
      }
    }
  };
  parent.onEnable = function() {
    ModAPI.player.capabilities.isFlying = true;
    ModAPI.player.reload();
  };
  parent.onDisable = function() {
    ModAPI.player.capabilities.isFlying = false;
    ModAPI.player.reload();
  };
}
var settings = [
  {
    name: "Mode",
    type: "List",
    modes: ["Abilities", "Packet"],
    current: 0
  }
];

// src/cheats/fullbright.ts
var exports_fullbright = {};
__export(exports_fullbright, {
  init: () => {
    {
      return init2;
    }
  }
});
function init2() {
}

// src/util/actualModules.ts
var template = function(mod) {
  this.enabledDONOTUSE = false;
  this.init = function() {
  };
  this.onEnable = function() {
  };
  this.onDisable = function() {
  };
  this.enable = function() {
    this.enabledDONOTUSE = true;
    this.onEnable();
    refreshModules();
  };
  this.disable = function() {
    this.enabledDONOTUSE = false;
    this.onDisable();
    refreshModules();
  };
  this.getEnabled = function() {
    return this.enabledDONOTUSE;
  };
  this.toggle = function() {
    this.enabledDONOTUSE = !this.enabledDONOTUSE;
    if (this.enabledDONOTUSE) {
      this.onEnable();
    } else {
      this.onDisable();
    }
  };
  this.onUpdate = function() {
  };
  this.alert = function() {
    alert();
  };
  this.settings = [];
  mod.init(this);
};
var categories = {
  movement: "Movement",
  player: "Player",
  render: "Render"
};
var modules = {
  flight: {
    name: "Flight",
    function: new template(exports_flight),
    category: "Movement",
    description: "Allows you to fly",
    key: 0
  },
  fullbright: {
    name: "Fullbright",
    function: new template(exports_fullbright),
    category: "Render",
    description: "No more darkness",
    key: 0
  }
};

// src/gui.ts
function destroy() {
  if (document.getElementById("ui") != null) {
    document.getElementById("ui").remove();
  }
}
function isOpen() {
  if (document.getElementById("ui") == null) {
    return false;
  } else {
    return true;
  }
}
function open() {
  document.exitPointerLock();
  var cn = clientName;
  const ui = document.createElement("div");
  ui.id = "ui";
  ui.style.position = "fixed";
  ui.style.width = "66%";
  ui.style.height = "66%";
  ui.style.top = document.body.clientHeight * 0.165 + "px";
  ui.style.left = document.body.clientWidth * 0.165 + "px";
  ui.style.color = "white";
  ui.style.backdropFilter = "blur(8px)";
  ui.style.background = "rgba(0,0,0,0.75)";
  ui.style.borderRadius = "15px";
  ui.style.padding = "15px";
  ui.style.boxShadow = "0px 0px 40px rgba(0, 195, 255,0.5)";
  ui.style.fontFamily = "monospace";
  ui.style.overflowY = "hidden";
  ui.style.animation = "rgb 4s linear infinite";
  const styleSheet = document.styleSheets[0];
  styleSheet.insertRule(`
  ::-webkit-scrollbar {
    width: 10px;
  }`);
  styleSheet.insertRule(`
  ::-webkit-scrollbar-track {
    background: rgba(0,0,0,0);
  }`);
  styleSheet.insertRule(`
  ::-webkit-scrollbar-thumb {
  background: rgba(100,100,100,0.5);
  filter: blur(4px);
  }`);
  styleSheet.insertRule(`@keyframes rgb {
    0% { box-shadow: 0px 0px 40px rgba(255, 0, 0,0.75); }
    16% { box-shadow: 0px 0px 40px rgba(255, 255, 0,0.75); }
    33% { box-shadow: 0px 0px 40px rgba(0, 255, 0,0.75); }
    50% { box-shadow: 0px 0px 40px rgba(0, 255, 255,0.75); }
    66% { box-shadow: 0px 0px 40px rgba(0, 0, 255,0.75); }
    83% { box-shadow: 0px 0px 40px rgba(255, 0, 255,0.75); }
    100% { box-shadow: 0px 0px 40px rgba(255, 0, 0,0.75); }
  }`);
  document.body.appendChild(ui);
  const title = document.createElement("div");
  title.innerText = cn;
  title.style.fontSize = "24px";
  title.style.margin = "5px";
  ui.appendChild(title);
  var search = document.createElement("input");
  search.style.width = "33%";
  search.type = "text";
  search.style.border = "solid 2px rgba(200,200,200,0.5)";
  search.style.display = "inline-block";
  search.style.padding = "5px";
  search.style.marginLeft = "20px";
  search.style.background = "rgba(50,50,50,.24)";
  search.placeholder = "\uD83D\uDD0E\uFE0E Search";
  search.style.backdropFilter = "blur(8px)";
  title.appendChild(search);
  const close = document.createElement("div");
  close.innerText = "X";
  close.style.fontSize = "28px";
  close.style.position = "absolute";
  close.style.right = "15px";
  close.style.top = "10px";
  close.style.cursor = "pointer";
  close.onclick = function() {
    destroy();
  };
  ui.appendChild(close);
  var bar = document.createElement("div");
  bar.style.overflowX = "scroll";
  ui.appendChild(bar);
  for (let i in categories) {
    if (categories.hasOwnProperty(i)) {
      const category = document.createElement("div");
      category.innerText = categories[i];
      category.style.fontSize = "18px";
      category.style.cursor = "pointer";
      category.style.display = "inline-block";
      category.style.padding = "10px";
      category.style.margin = "5px";
      category.style.background = "rgba(100,100,100,0.5)";
      category.style.borderRadius = "5px";
      category.onclick = function() {
      };
      bar.appendChild(category);
    }
  }
  container = document.createElement("center");
  container.style.height = "100%";
  container.style.overflowY = "scroll";
  ui.appendChild(container);
  refreshModules();
}
function refreshModules() {
  if (isOpen()) {
    container.innerHTML = "";
    for (let i in modules) {
      if (modules.hasOwnProperty(i)) {
        var modl = document.createElement("div");
        var modltitle = document.createElement("div");
        modltitle.innerText = `${modules[i].name}`;
        modltitle.style.fontSize = "22px";
        modltitle.style.fontWeight = "bold";
        modl.appendChild(modltitle);
        modl.style.textAlign = "left";
        modl.style.display = "inline-block";
        modl.style.width = "25%";
        modl.style.height = "25%";
        modl.style.padding = "5px";
        modl.style.borderRadius = "15px";
        modl.style.margin = "10px";
        modl.style.cursor = "pointer";
        modl.style.background = "rgba(100,100,100,0.5)";
        if (modules[i].function.getEnabled()) {
          modl.style.borderLeft = "2px solid rgba(0, 255, 0,1)";
        }
        modl.onclick = function() {
          modules[i].function.toggle();
          refreshModules();
        };
        container.appendChild(modl);
      }
    }
  }
}
var container;

// src/main.ts
logToConsole("Init...");
logToChat("Init...");
logToChat("Loading modules...");
var overlay = document.createElement("div");
overlay.style.position = "fixed";
overlay.style.width = "100%";
overlay.style.height = "100%";
overlay.style.pointerEvents = "none";
overlay.style.zIndex = "1";
document.body.appendChild(overlay);
ModAPI.require("player");
ModAPI.addEventListener("key", function(e) {
  if (e.key == 54 && !isOpen()) {
    open();
  } else {
    destroy();
  }
});
ModAPI.addEventListener("update", function() {
  for (let key in modules) {
    if (modules.hasOwnProperty(key)) {
      modules[key].function.onUpdate();
    }
  }
});

//# debugId=DDDFFFC63C4473BB64756e2164756e21
//# sourceMappingURL=data:application/json;base64,
