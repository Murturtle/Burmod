var _=Object.defineProperty;var V=($,x)=>{for(var w in x)_($,w,{get:x[w],enumerable:!0,configurable:!0,set:(f)=>x[w]=()=>f})};var q="burmod";function W($){console.log(`[${q}] ${$}`)}function H($){ModAPI.displayToChat({msg:`\xA75[${q}]\xA7r ${$}`})}var J={};V(J,{settings:()=>{{return k}},init:()=>{{return C}}});function C($){$.onUpdate=function(){if($.getEnabled()){if(!ModAPI.player.capabilities.isFlying)ModAPI.player.capabilities.isFlying=!0,ModAPI.player.reload()}},$.onEnable=function(){ModAPI.player.capabilities.isFlying=!0,ModAPI.player.reload()},$.onDisable=function(){ModAPI.player.capabilities.isFlying=!1,ModAPI.player.reload()}}var k=[{name:"Mode",type:"List",modes:["Abilities","Packet"],current:0}];var K={};V(K,{init:()=>{{return L}}});function L(){}var X=function($){this.enabledDONOTUSE=!1,this.init=function(){},this.onEnable=function(){},this.onDisable=function(){},this.enable=function(){this.enabledDONOTUSE=!0,this.onEnable(),D()},this.disable=function(){this.enabledDONOTUSE=!1,this.onDisable(),D()},this.getEnabled=function(){return this.enabledDONOTUSE},this.toggle=function(){if(this.enabledDONOTUSE=!this.enabledDONOTUSE,this.enabledDONOTUSE)this.onEnable();else this.onDisable()},this.onUpdate=function(){},this.alert=function(){alert()},this.settings=[],$.init(this)},F={movement:"Movement",player:"Player",render:"Render"},I={flight:{name:"Flight",function:new X(J),category:"Movement",description:"Allows you to fly",key:0},fullbright:{name:"Fullbright",function:new X(K),category:"Render",description:"No more darkness",key:0}};function P(){if(document.getElementById("ui")!=null)document.getElementById("ui").remove()}function Q(){if(document.getElementById("ui")==null)return!1;else return!0}function Z(){document.exitPointerLock();var $=q;const x=document.createElement("div");x.id="ui",x.style.position="fixed",x.style.width="66%",x.style.height="66%",x.style.top=document.body.clientHeight*0.165+"px",x.style.left=document.body.clientWidth*0.165+"px",x.style.color="white",x.style.backdropFilter="blur(8px)",x.style.background="rgba(0,0,0,0.75)",x.style.borderRadius="15px",x.style.padding="15px",x.style.boxShadow="0px 0px 40px rgba(0, 195, 255,0.5)",x.style.fontFamily="monospace",x.style.overflowY="hidden",x.style.animation="rgb 4s linear infinite";const w=document.styleSheets[0];w.insertRule(`
  ::-webkit-scrollbar {
    width: 10px;
  }`),w.insertRule(`
  ::-webkit-scrollbar-track {
    background: rgba(0,0,0,0);
  }`),w.insertRule(`
  ::-webkit-scrollbar-thumb {
  background: rgba(100,100,100,0.5);
  filter: blur(4px);
  }`),w.insertRule(`@keyframes rgb {
    0% { box-shadow: 0px 0px 40px rgba(255, 0, 0,0.75); }
    16% { box-shadow: 0px 0px 40px rgba(255, 255, 0,0.75); }
    33% { box-shadow: 0px 0px 40px rgba(0, 255, 0,0.75); }
    50% { box-shadow: 0px 0px 40px rgba(0, 255, 255,0.75); }
    66% { box-shadow: 0px 0px 40px rgba(0, 0, 255,0.75); }
    83% { box-shadow: 0px 0px 40px rgba(255, 0, 255,0.75); }
    100% { box-shadow: 0px 0px 40px rgba(255, 0, 0,0.75); }
  }`),document.body.appendChild(x);const f=document.createElement("div");f.innerText=$,f.style.fontSize="24px",f.style.margin="5px",x.appendChild(f);var z=document.createElement("input");z.style.width="33%",z.type="text",z.style.border="solid 2px rgba(200,200,200,0.5)",z.style.borderRadius="10px",z.style.color="rgba(255,255,255,1)",z.style.display="inline-block",z.style.padding="8px",z.style.marginLeft="20px",z.style.fontSize="22px",z.style.background="rgba(50,50,50,.24)",z.placeholder="\uD83D\uDD0E\uFE0E Search",z.style.backdropFilter="blur(8px)",f.appendChild(z);const R=document.createElement("div");R.innerText="X",R.style.fontSize="28px",R.style.position="absolute",R.style.right="15px",R.style.top="10px",R.style.cursor="pointer",R.onclick=function(){P()},x.appendChild(R);var G=document.createElement("div");G.style.overflowX="scroll",x.appendChild(G);for(let U in F)if(F.hasOwnProperty(U)){const E=document.createElement("div");E.innerText=F[U],E.style.fontSize="18px",E.style.cursor="pointer",E.style.display="inline-block",E.style.padding="10px",E.style.margin="5px",E.style.background="rgba(100,100,100,0.5)",E.style.borderRadius="5px",E.onclick=function(){},G.appendChild(E)}A=document.createElement("center"),A.style.height="100%",A.style.overflowY="scroll",x.appendChild(A),D()}function D(){if(Q()){A.innerHTML="";for(let w in I)if(I.hasOwnProperty(w)){var $=document.createElement("div"),x=document.createElement("div");if(x.innerText=`${I[w].name}`,x.style.fontSize="22px",x.style.fontWeight="bold",$.appendChild(x),$.style.textAlign="left",$.style.display="inline-block",$.style.width="25%",$.style.height="25%",$.style.padding="5px",$.style.borderRadius="15px",$.style.margin="10px",$.style.cursor="pointer",$.style.background="rgba(100,100,100,0.5)",I[w].function.getEnabled())$.style.borderLeft="2px solid rgba(0, 255, 0,1)";$.onclick=function(){I[w].function.toggle(),D()},A.appendChild($)}}}var A;W("Init...");H("Init...");H("Loading modules...");var B=document.createElement("div");B.style.position="fixed";B.style.width="100%";B.style.height="100%";B.style.pointerEvents="none";B.style.zIndex="1";document.body.appendChild(B);ModAPI.require("player");ModAPI.addEventListener("key",function($){if($.key==54&&!Q())Z();else P()});ModAPI.addEventListener("update",function(){for(let $ in I)if(I.hasOwnProperty($))I[$].function.onUpdate()});

//# debugId=506AD19DF3A7036864756e2164756e21
//# sourceMappingURL=data:application/json;base64,
